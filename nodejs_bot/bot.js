// nodejs_bot/bot.js

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const PYTHON_API_URL = 'http://127.0.0.1:18361/video_data';
const TOKEN_PATH = path.join(__dirname, 'token.txt');

// =================================================================
//  –ù–û–í–´–ô –ë–õ–û–ö: –°–õ–û–í–ê–†–¨ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –ö–û–î–û–í –°–¢–†–ê–ù
// =================================================================
const countryCodes = {
    'JP': '–Ø–ø–æ–Ω–∏—è', 'US': '–°–®–ê', 'RU': '–†–æ—Å—Å–∏—è', 'UA': '–£–∫—Ä–∞–∏–Ω–∞', 'BY': '–ë–µ–ª–∞—Ä—É—Å—å',
    'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'KR': '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', 'DE': '–ì–µ—Ä–º–∞–Ω–∏—è', 'FR': '–§—Ä–∞–Ω—Ü–∏—è',
    'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'BR': '–ë—Ä–∞–∑–∏–ª–∏—è', 'ID': '–ò–Ω–¥–æ–Ω–µ–∑–∏—è', 'VN': '–í—å–µ—Ç–Ω–∞–º',
    'TH': '–¢–∞–∏–ª–∞–Ω–¥', 'TR': '–¢—É—Ä—Ü–∏—è', 'PH': '–§–∏–ª–∏–ø–ø–∏–Ω—ã', 'PL': '–ü–æ–ª—å—à–∞',
    'IT': '–ò—Ç–∞–ª–∏—è', 'ES': '–ò—Å–ø–∞–Ω–∏—è', 'CA': '–ö–∞–Ω–∞–¥–∞', 'MX': '–ú–µ–∫—Å–∏–∫–∞',
    'EG': '–ï–≥–∏–ø–µ—Ç', 'SA': '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', 'AE': '–û–ê–≠', 'MY': '–ú–∞–ª–∞–π–∑–∏—è',
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã. –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–µ—Ç —Å–∞–º –∫–æ–¥.
const getCountryName = (code) => {
    if (!code) return null;
    return countryCodes[code.toUpperCase()] || code; // .toUpperCase() –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
};
// =================================================================
//  –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê
// =================================================================


// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
const log = (message) => {
    console.log(`[${new Date().toLocaleString('ru-RU')}] ${message}`);
};

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ---
if (!fs.existsSync(TOKEN_PATH)) {
    log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª token.txt –≤ –ø–∞–ø–∫–µ nodejs_bot –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.');
    process.exit(1);
}
const token = fs.readFileSync(TOKEN_PATH, 'utf8').trim();
if (!token) {
    log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª token.txt –ø—É—Å—Ç!');
    process.exit(1);
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new TelegramBot(token, { polling: true });
log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text) return;

    const tiktokUrlRegex = /(https?:\/\/(?:www\.)?(?:m|vt|vm)\.tiktok\.com\/[^\s]+)/;
    const match = text.match(tiktokUrlRegex);

    if (match && match[0]) {
        const tiktokUrl = match[0];
        log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: ${tiktokUrl} –≤ —á–∞—Ç–µ ${chatId}`);

        const waitingMessage = await bot.sendMessage(chatId, '‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...', {
            reply_to_message_id: msg.message_id
        });

        try {
            const response = await axios.get(PYTHON_API_URL, {
                params: {
                    original_url: tiktokUrl
                },
                timeout: 120000 // –¢–∞–π–º-–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã
            });

            const { metadata, videoBase64 } = response.data;
            log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            
            // --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ ---
            const stats = metadata.statistics;
            const videoDetails = metadata.video_details;
            const shazam = metadata.shazam;

            let caption = `üë§ <b>–ê–≤—Ç–æ—Ä:</b> <a href="https://www.tiktok.com/@${metadata.author.uniqueId}">@${metadata.author.uniqueId}</a>\n`;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞
            const regionName = getCountryName(metadata.region);
            if (regionName) {
                caption += `üìç <b>–†–µ–≥–∏–æ–Ω:</b> ${regionName}\n`;
            }
            caption += '\n';

            if (metadata.description) {
                caption += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${metadata.description}\n\n`;
            }

            caption += `üéµ <b>–ú—É–∑—ã–∫–∞:</b> ${metadata.music.title}\n`;
            if (shazam && shazam.title) {
                caption += `üéß <b>Shazam:</b> ${shazam.artist} - ${shazam.title}\n`;
            }

            caption += `\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
            caption += `  ‚ù§Ô∏è –õ–∞–π–∫–∏: ${stats.diggCount?.toLocaleString('ru-RU') || 0}\n`;
            caption += `  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${stats.commentCount?.toLocaleString('ru-RU') || 0}\n`;
            caption += `  üîÅ –†–µ–ø–æ—Å—Ç—ã: ${stats.shareCount?.toLocaleString('ru-RU') || 0}\n`;
            caption += `  ‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.playCount?.toLocaleString('ru-RU') || 0}\n`;

            caption += `\n‚öôÔ∏è <b>–í–∏–¥–µ–æ:</b>\n`;
            caption += `  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${videoDetails.resolution}\n`;
            caption += `  FPS: ${videoDetails.fps}\n`;
            caption += `  –†–∞–∑–º–µ—Ä: ${videoDetails.size_mb}`;

            const videoBuffer = Buffer.from(videoBase64, 'base64');

            await bot.sendVideo(chatId, videoBuffer, {
                caption: caption,
                parse_mode: 'HTML'
            });

            await bot.deleteMessage(chatId, waitingMessage.message_id);
            log(`–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);

        } catch (error) {
            log(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. üò•';

            if (error.response) {
                log(`–û—à–∏–±–∫–∞ –æ—Ç API: ${JSON.stringify(error.response.data, null, 2)}`);
                const apiErrorDetail = error.response.data.detail;
                if (typeof apiErrorDetail === 'string' && apiErrorDetail.includes("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")) {
                    errorMessage = '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –Ω–∞ TikTok. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.';
                } else {
                    errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ. üò•';
                }
            } else {
                log(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º-–∞—É—Ç: ${error.message}`);
                 errorMessage = '–°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
            
            await bot.editMessageText(errorMessage, {
                chat_id: chatId,
                message_id: waitingMessage.message_id
            });
        }
    }
});