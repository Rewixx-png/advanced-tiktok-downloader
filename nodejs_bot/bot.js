const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

const PUBLIC_SERVER_IP = '129.146.118.56';
const API_INTERNAL_URL = 'http://127.0.0.1:18361';

const tokenPath = path.join(__dirname, 'token.txt');
if (!fs.existsSync(tokenPath)) {
    console.error('–û—à–∏–±–∫–∞: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}
const token = fs.readFileSync(tokenPath, 'utf8').trim();
const bot = new TelegramBot(token, { polling: true });
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

const countryCodes = { 'AU': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è üá¶üá∫', 'AT': '–ê–≤—Å—Ç—Ä–∏—è üá¶üáπ', 'AZ': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω üá¶üáø', 'AL': '–ê–ª–±–∞–Ω–∏—è üá¶üá±', 'DZ': '–ê–ª–∂–∏—Ä üá©üáø', 'AE': '–û–ê–≠ üá¶üá™', 'AR': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ üá¶üá∑', 'AM': '–ê—Ä–º–µ–Ω–∏—è üá¶üá≤', 'BD': '–ë–∞–Ω–≥–ª–∞–¥–µ—à üáßüá©', 'BY': '–ë–µ–ª–∞—Ä—É—Å—å üáßüáæ', 'BE': '–ë–µ–ª—å–≥–∏—è üáßüá™', 'BG': '–ë–æ–ª–≥–∞—Ä–∏—è üáßüá¨', 'BR': '–ë—Ä–∞–∑–∏–ª–∏—è üáßüá∑', 'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß', 'HU': '–í–µ–Ω–≥—Ä–∏—è üá≠üá∫', 'VE': '–í–µ–Ω–µ—Å—É—ç–ª–∞ üáªüá™', 'VN': '–í—å–µ—Ç–Ω–∞–º üáªüá≥', 'DE': '–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™', 'GR': '–ì—Ä–µ—Ü–∏—è üá¨üá∑', 'GE': '–ì—Ä—É–∑–∏—è üá¨üá™', 'DK': '–î–∞–Ω–∏—è üá©üá∞', 'EG': '–ï–≥–∏–ø–µ—Ç üá™üá¨', 'IL': '–ò–∑—Ä–∞–∏–ª—å üáÆüá±', 'IN': '–ò–Ω–¥–∏—è üáÆüá≥', 'ID': '–ò–Ω–¥–æ–Ω–µ–∑–∏—è üáÆüá©', 'IQ': '–ò—Ä–∞–∫ üáÆüá∂', 'IR': '–ò—Ä–∞–Ω üáÆüá∑', 'IE': '–ò—Ä–ª–∞–Ω–¥–∏—è üáÆüá™', 'ES': '–ò—Å–ø–∞–Ω–∏—è üá™üá∏', 'IT': '–ò—Ç–∞–ª–∏—è üáÆüáπ', 'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω üá∞üáø', 'KH': '–ö–∞–º–±–æ–¥–∂–∞ üá∞üá≠', 'CA': '–ö–∞–Ω–∞–¥–∞ üá®üá¶', 'QA': '–ö–∞—Ç–∞—Ä üá∂üá¶', 'CY': '–ö–∏–ø—Ä üá®üáæ', 'KG': '–ö–∏—Ä–≥–∏–∑–∏—è üá∞üá¨', 'CN': '–ö–∏—Ç–∞–π üá®üá≥', 'CO': '–ö–æ–ª—É–º–±–∏—è üá®üá¥', 'KW': '–ö—É–≤–µ–π—Ç üá∞üáº', 'LV': '–õ–∞—Ç–≤–∏—è üá±üáª', 'LB': '–õ–∏–≤–∞–Ω üá±üáß', 'LT': '–õ–∏—Ç–≤–∞ üá±üáπ', 'MY': '–ú–∞–ª–∞–π–∑–∏—è üá≤üáæ', 'MA': '–ú–∞—Ä–æ–∫–∫–æ üá≤üá¶', 'MX': '–ú–µ–∫—Å–∏–∫–∞ üá≤üáΩ', 'MD': '–ú–æ–ª–¥–æ–≤–∞ üá≤üá©', 'MN': '–ú–æ–Ω–≥–æ–ª–∏—è üá≤üá≥', 'MM': '–ú—å—è–Ω–º–∞ üá≤üá≤', 'NP': '–ù–µ–ø–∞–ª üá≥üáµ', 'NL': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±', 'NZ': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è üá≥üáø', 'NO': '–ù–æ—Ä–≤–µ–≥–∏—è üá≥üá¥', 'OM': '–û–º–∞–Ω üá¥üá≤', 'PK': '–ü–∞–∫–∏—Å—Ç–∞–Ω üáµüá∞', 'PE': '–ü–µ—Ä—É üáµüá™', 'PL': '–ü–æ–ª—å—à–∞ üáµüá±', 'PT': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è üáµüáπ', 'PR': '–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ üáµüá∑', 'KR': '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è üá∞üá∑', 'RU': '–†–æ—Å—Å–∏—è üá∑üá∫', 'RO': '–†—É–º—ã–Ω–∏—è üá∑üá¥', 'SA': '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è üá∏üá¶', 'RS': '–°–µ—Ä–±–∏—è üá∑üá∏', 'SG': '–°–∏–Ω–≥–∞–ø—É—Ä üá∏üá¨', 'SK': '–°–ª–æ–≤–∞–∫–∏—è üá∏üá∞', 'SI': '–°–ª–æ–≤–µ–Ω–∏—è üá∏üáÆ', 'US': '–°–®–ê üá∫üá∏', 'TH': '–¢–∞–∏–ª–∞–Ω–¥ üáπüá≠', 'TW': '–¢–∞–π–≤–∞–Ω—å üáπüáº', 'TR': '–¢—É—Ä—Ü–∏—è üáπüá∑', 'UZ': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω üá∫üáø', 'UA': '–£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶', 'UY': '–£—Ä—É–≥–≤–∞–π üá∫üáæ', 'PH': '–§–∏–ª–∏–ø–ø–∏–Ω—ã üáµüá≠', 'FI': '–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ', 'FR': '–§—Ä–∞–Ω—Ü–∏—è üá´üá∑', 'HR': '–•–æ—Ä–≤–∞—Ç–∏—è üá≠üá∑', 'CZ': '–ß–µ—Ö–∏—è üá®üáø', 'CL': '–ß–∏–ª–∏ üá®üá±', 'CH': '–®–≤–µ–π—Ü–∞—Ä–∏—è üá®üá≠', 'SE': '–®–≤–µ—Ü–∏—è üá∏üá™', 'LK': '–®—Ä–∏-–õ–∞–Ω–∫–∞ üá±üá∞', 'EC': '–≠–∫–≤–∞–¥–æ—Ä üá™üá®', 'EE': '–≠—Å—Ç–æ–Ω–∏—è üá™üá™', 'ZA': '–Æ–ê–† üáøüá¶', 'JP': '–Ø–ø–æ–Ω–∏—è üáØüáµ'};
function getCountryName(code) { if (!code) return '–ù–µ —É–∫–∞–∑–∞–Ω'; const upperCode = code.toUpperCase(); return countryCodes[upperCode] || upperCode; }
function formatNumber(num) { if (typeof num !== 'number') return 0; return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1 '); }
function formatTimestamp(unixTimestamp) { if (!unixTimestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'; const d = new Date(unixTimestamp * 1000); return d.toLocaleString('ru-RU', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: 'Europe/Moscow'}).replace(',', ''); }

function escapeMarkdownV2(text) {
    if (typeof text !== 'string') return '';
    return text.replace(/([_*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

bot.on('message', async (msg) => {
    if (!msg.text) return;
    
    const chatId = msg.chat.id;
    const text = msg.text;
    const tiktokRegex = /https?:\/\/(?:www\.|vm\.|vt\.)?tiktok\.com\/\S+/;
    const match = text.match(tiktokRegex);

    if (match) {
        const tiktokUrl = match[0];
        const waitingMsg = await bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...', { reply_to_message_id: msg.message_id });

        try {
            const response = await axios.get(`${API_INTERNAL_URL}/video_data`, { params: { original_url: tiktokUrl }, timeout: 90000 });
            const { metadata, videoBase64, videoFilePath } = response.data;
            
            await bot.deleteMessage(chatId, waitingMsg.message_id);
            
            let sentVideoMsg;
            if (videoFilePath) {
                sentVideoMsg = await bot.sendVideo(chatId, videoFilePath, { caption: '‚Äã' });
            } else if (videoBase64) {
                const videoBuffer = Buffer.from(videoBase64, 'base64');
                sentVideoMsg = await bot.sendVideo(chatId, videoBuffer, { caption: '‚Äã' });
            } else {
                throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –≤–∏–¥–µ–æ, –Ω–∏ –ø—É—Ç—å –∫ –Ω–µ–º—É.");
            }
            
            let caption = '';
            if (metadata.author && metadata.author.uniqueId) {
                caption += `*–ê–≤—Ç–æ—Ä:* @${escapeMarkdownV2(metadata.author.uniqueId)}\n`;
                if (metadata.authorStats) {
                    caption += `  üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${formatNumber(metadata.authorStats.followerCount)}\n`;
                    caption += `  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: ${formatNumber(metadata.authorStats.heartCount)}\n`;
                }
                caption += `\n`;
            }
            
            caption += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdownV2(metadata.description) || '_–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è_'}\n\n`;
            
            if (metadata.statistics) {
                caption += `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ:*\n`;
                caption += `  ‚ù§Ô∏è –õ–∞–π–∫–∏: ${formatNumber(metadata.statistics.diggCount || metadata.statistics.likeCount)}\n`;
                caption += `  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${formatNumber(metadata.statistics.commentCount)}\n`;
                caption += `  üîÅ –†–µ–ø–æ—Å—Ç—ã: ${formatNumber(metadata.statistics.shareCount)}\n`;
                caption += `  ‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${formatNumber(metadata.statistics.playCount)}\n\n`;
            }
            
            caption += `*–î–µ—Ç–∞–ª–∏:*\n`;
            caption += `  üåë *–¢–µ–Ω–µ–≤–æ–π –±–∞–Ω:* ${metadata.shadow_ban ? '–î–∞ ‚ö†Ô∏è' : '–ù–µ—Ç ‚úÖ'}\n`;
            caption += `  üìç *–†–µ–≥–∏–æ–Ω:* ${getCountryName(metadata.region)}\n`;
            caption += `  üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${escapeMarkdownV2(formatTimestamp(metadata.createTime))}\n`;
            if (metadata.video_duration) caption += `  ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${metadata.video_duration} —Å–µ–∫\n`;
            if (metadata.video_details) {
                if (metadata.video_details.resolution) caption += `  ‚öôÔ∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${metadata.video_details.resolution}\n`;
                // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
                if (metadata.video_details.fps) caption += `  üéûÔ∏è –ö–∞–¥—Ä–æ–≤/—Å–µ–∫: \\~${metadata.video_details.fps}\n`;
                if (metadata.video_details.size_mb) caption += `  üíæ –†–∞–∑–º–µ—Ä: ${escapeMarkdownV2(metadata.video_details.size_mb)}`;
            }

            let musicLine = `\n\nüéµ *–ú—É–∑—ã–∫–∞:* _–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫_`;
            if (metadata.shazam && metadata.shazam.title && metadata.shazam.title !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                musicLine = `\n\nüéµ *Shazam:* ${escapeMarkdownV2(metadata.shazam.artist)} \\- ${escapeMarkdownV2(metadata.shazam.title)}`;
            }
            let finalCaption = caption.trim() + musicLine;
            
            if (finalCaption && finalCaption.trim().length > 1) {
                const options = {
                    chat_id: chatId,
                    message_id: sentVideoMsg.message_id,
                    parse_mode: 'MarkdownV2' 
                };

                if (metadata.music_file_id && metadata.video_id) {
                    const musicDownloadUrl = `http://${PUBLIC_SERVER_IP}:18361/download/${metadata.video_id}/${metadata.music_file_id}`;
                    options.reply_markup = JSON.stringify({
                        inline_keyboard: [[{ text: 'üéµ –°–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫', url: musicDownloadUrl }]]
                    });
                }
                
                try {
                    await bot.editMessageCaption(finalCaption.trim(), options);
                } catch (editError) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏ (MarkdownV2):", editError.response ? editError.response.body : editError.message);
                }
            } else {
                 console.log("–ü–æ–¥–ø–∏—Å—å –ø—É—Å—Ç–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            }

        } catch (error) {
            console.error(`[${chatId}] –û—à–∏–±–∫–∞:`, error.response ? error.response.data : error.message);
            const errorText = error.response?.data?.detail ? `–û—à–∏–±–∫–∞: ${error.response.data.detail}` : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.';
            await bot.editMessageText(errorText, { chat_id: chatId, message_id: waitingMsg.message_id });
        }
    }
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ (polling_error):', error.code, '-', error.message);
});