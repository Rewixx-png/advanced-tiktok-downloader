const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const axios = require('axios');

let token;
try {
    token = fs.readFileSync('token.txt', 'utf-8').trim();
} catch (error) {
    console.error('–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª token.txt.');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
console.log('Node.js –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...');

const PYTHON_API_URL = "http://127.0.0.1:18361/video_data";

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    if (!messageText || messageText.startsWith('/start')) return;

    const urlRegex = /(https?:\/\/(?:www\.)?(?:vm|vt)\.tiktok\.com\/[\w.-]+)|(https?:\/\/(?:www\.)?tiktok\.com\/[@\w.-]+\/video\/\d+)/;
    const urlMatch = messageText.match(urlRegex);

    if (urlMatch && urlMatch[0]) {
        const tiktokUrl = urlMatch[0];
        let processingMessage;

        try {
            processingMessage = await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ API. –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞... ‚è≥', { reply_to_message_id: msg.message_id });
            
            // –ò–ó–ú–ï–ù–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º-–∞—É—Ç –¥–æ 2 –º–∏–Ω—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            const apiResponse = await axios.get(PYTHON_API_URL, {
                params: { url: tiktokUrl },
                timeout: 120000 
            });
            const responseData = apiResponse.data;
            
            await bot.editMessageText('‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...', { chat_id: chatId, message_id: processingMessage.message_id });
            
            const videoData = responseData.metadata;
            const videoBuffer = Buffer.from(responseData.video_base64, 'base64');
            
            const videoSizeInMb = `${(videoBuffer.length / (1024 * 1024)).toFixed(2)} MB`;
            const stats = videoData.statistics;

            const caption = `üë§ –ê–≤—Ç–æ—Ä: ${videoData.author.nickname || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} (@${videoData.author.unique_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${videoData.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üéµ –ú—É–∑—ã–∫–∞: ${videoData.music.title || '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫'} - ${videoData.music.author || ''}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   - ‚ù§Ô∏è –õ–∞–π–∫–∏: ${(stats.diggCount || 0).toLocaleString('ru-RU')}
   - ‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${(stats.playCount || 0).toLocaleString('ru-RU')}
   - üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${(stats.commentCount || 0).toLocaleString('ru-RU')}
   - üîÅ –ü–æ–¥–µ–ª–∏–ª–∏—Å—å: ${(stats.shareCount || 0).toLocaleString('ru-RU')}
            
üíæ –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: ${videoSizeInMb}`;
            
            await bot.sendVideo(chatId, videoBuffer, { caption }, { filename: 'video.mp4', contentType: 'video/mp4' });
            await bot.deleteMessage(chatId, processingMessage.message_id);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
            const errorMessage = `‚ùå –û—à–∏–±–∫–∞!\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ, —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ API TikTok –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`;
            if (processingMessage) {
                await bot.editMessageText(errorMessage, { chat_id: chatId, message_id: processingMessage.message_id });
            } else {
                await bot.sendMessage(chatId, errorMessage);
            }
        }
    }
});